#!/bin/python3
'''
Improved version of the cli-chat client for waksmemes. Original client here:

https://github.com/ehrenjn/cli-chat

rtx is intended to better organized from a code-base persepctive than the 
original. Additionally it is intended to (eventually) have a better UI.
rtx is target for unix and python3. If you want a different platform try
the original client.

(c) Zak Nafziger 2018
'''

import requests
import json
import hashlib
from Crypto import Random
from Crypto.Cipher import AES
import base64
import datetime
import sys
import os
import urllib
import ast
import threading
import queue
import termios
import tty
from enum import Enum
import math
import hunspell

# utilities ===================================================================
class AESCipher:
	# basic class to provide AES cryptography, shamelessly ripped from 
	# stack exchange:
	# https://stackoverflow.com/questions/12524994/encrypt-decrypt-using-py
	# crypto-aes-256

	def __init__(self, key):
		self.bs = 32
		self.key = hashlib.sha256(key.encode()).digest()

	def encrypt(self, raw):
		raw = self._pad(raw)
		iv = Random.new().read(AES.block_size)
		cipher = AES.new(self.key, 
			AES.MODE_CBC, iv)
		return base64.b64encode(iv + cipher.encrypt(raw))

	def decrypt(self, enc):
		enc = base64.b64decode(enc)
		iv = enc[:AES.block_size]
		cipher = AES.new(self.key, 
			AES.MODE_CBC, iv)
		unpadded = self._unpad(
			cipher.decrypt(enc[AES.block_size:]))
		return unpadded.decode('utf-8', errors = 'ignore')

	def _pad(self, s):
		return s + (self.bs - len(s)%self.bs)*\
			chr(self.bs - len(s)%self.bs)

	@staticmethod
	def _unpad(s):
		return s[:-ord(s[len(s)-1:])]

def color(string, color):
	colors = {
		'red': "\x1b[1;31m",
		'green': "\x1b[1;32m",
		'yellow': "\x1b[1;33m",
		'blue': "\x1b[1;34m",
		'purple': "\x1b[1;35m",
		'cyan': "\x1b[1;36m",
		'stop color' : "\x1b[0m"
		}
	if color not in colors:
		return string
	else:
		return colors[color] + string + colors['stop color']

def merge_dicts(a, b):
	# recursively merge two dictionaries
	# if a key is only in b it is added to a
	# if a key is in both a and b and it points to a dict in both
	#       they are merged
	# otherwise the value of a is used
	for k in b:
		if k not in a:
			a[k] = b[k]
		elif isinstance(a[k], dict) and isinstance(b[k], dict):
			a[k] = merge_dicts(a[k], b[k])
	return a

def write_and_flush(string):
	sys.stdout.write(string)
	sys.stdout.flush()

def clear_and_home():
	# clear the screen and move the cursor to 0,0
	# relys on terminal emulating vt220 escape sequences
	write_and_flush("\x1B[2J")
	write_and_flush("\x1B[0;0H")

def delete_lines(n):
	for c in reversed(range(n)):
		write_and_flush("\x1B[1M")
		if c > 0:
			write_and_flush("\x1B[A")

class input_buffer:
	class states(Enum):
		S0 = 0
		S1 = 1
		S2 = 2
		S3 = 3

	def __init__(self):
		self.clear()

	def clear(self):
		self.current_state = self.states.S0
		self.buf = []
		self.cursor_pos = 0

	def line(self):
		line = ""
		for c in range(len(self.buf)):
			line += self.buf[c]
		return line

	def cursor_line(self):
		cursor = "_"
		line = ""
		cursor_flag = False
		for c in range(len(self.buf)):
			if c == self.cursor_pos:
				line += cursor
				cursor_flag = True
			else:
				line += self.buf[c]
		if cursor_flag != True:
			line += cursor
		return line

	def append(self, to_append):
		for c in to_append:
			self.current_state = self._state_machine(
				self.states, self.current_state, c)

	def _state_machine(self, states, current_state, c):
		next_state = None
		if current_state == states.S0:
			if c == '\x08':
				self._backspace()
				next_state = states.S0
			elif c == '\x1B':
				next_state = states.S1
			else:
				self._append_at_cursor(c)
				next_state = states.S0
		elif current_state == states.S1:
			if c == '[':
				next_state = states.S2
			else:
				next_state = states.S0
		elif current_state == states.S2:
			if c == 'C':
				self._cursor_right()
				next_state = states.S0
			elif c == 'D':
				self._cursor_left()
				next_state = states.S0
			elif c == '3':
				next_state = states.S3
			else:
				next_state = states.S0
		elif current_state == states.S3:
			if c == '~':
				self._delete()
			next_state = states.S0
		return next_state

	def _append_at_cursor(self, c):
		start_to_cursor = self.buf[0:self.cursor_pos]
		cursor_to_end = self.buf[self.cursor_pos:len(self.buf)]
		start_to_cursor.append(c)
		self.buf = start_to_cursor + cursor_to_end
		self.cursor_pos += 1

	def _backspace(self):
		if self.cursor_pos <= 0:
			return
		start_to_cursor = self.buf[0:self.cursor_pos-1]
		cursor_to_end = self.buf[self.cursor_pos:len(self.buf)]
		self.buf = start_to_cursor + cursor_to_end
		self.cursor_pos -= 1

	def _cursor_right(self):
		if self.cursor_pos < len(self.buf):
			self.cursor_pos += 1

	def _cursor_left(self):
		if self.cursor_pos > 0:
			self.cursor_pos -= 1

	def _delete(self):
		if self.cursor_pos == len(self.buf):
			return
		start_to_cursor = self.buf[0:self.cursor_pos]
		cursor_to_end = self.buf[self.cursor_pos+1:len(self.buf)]
		self.buf = start_to_cursor + cursor_to_end

hs_check = hunspell.HunSpell("/usr/share/hunspell/en_CA-large.dic", "/usr/share/hunspell/en_CA-large.aff")

def spell_check(to_check):
	checked = ""
	for word in to_check.split():
		if not hs_check.spell(word):
			word = color(word, "red")
		checked += word
		checked += " "
	checked = checked[0:len(checked) - 1]
	return checked

# recieve chain ===============================================================
def rx(server, room, depth, ids_after):
	query = {'MAX_MSGS': depth, 'id': {'min': ids_after + 1}}
	reqs = requests.post(server + room, json = query)
	raw = reqs.content.decode('utf-8')
	msg_list = json.loads(raw)
	msg_list.reverse()

	if len(msg_list) > 0:
		last_id = msg_list[-1]['id']
	else:
		last_id = ids_after

	return msg_list, last_id

def decrypt(msg_list, key=None):
	for msg in msg_list:
		encryption = msg.get('encrypted', False)
		cipher_text = base64.b64decode(msg.get('msg',
			'')).decode('utf-8')
		if (encryption != False) and (key != None):
			cipher = AESCipher(key)
			msg['msg'] = cipher.decrypt(cipher_text)
		else:
			msg['msg'] = cipher_text
	return msg_list

def unpack(msg_list, unpack_settings=None):
	if unpack_settings == None:
		unpack_settings = {}

	# default line format and time format
	line_format = '[%T] %N%S: %M'
	time_format = '%H:%M'

	# get the line and time formats from the user's unpack_settings
	line_format = unpack_settings.get('line_format', line_format)
	time_format = unpack_settings.get('time_format', time_format)

	# get the user's format function if it exists
	format_function = unpack_settings.get('format_function',
		lambda a: a )

	# step through the message list formmatting the messages as we go
	arranged_msg_list = []
	for msg in msg_list:

		# format codes we know about:
		format_codes = {
			'%T' : None, # the formatted time
			'%N' : None, # sender's name
			'%S' : None, # seperator
			'%M' : None, # message
		}

		timestamp = msg['time']
		time = datetime.datetime.fromtimestamp(
			timestamp).strftime(time_format)
		format_codes['%T'] = time

		format_codes['%M'] = msg['msg']

		pack_settings = {}

		if 'settings' in msg:
			raw_settings = base64.b64decode(
				msg['settings']).decode('utf-8')
			pack_settings = json.loads(raw_settings)

		name = pack_settings.get('name', msg['ip'])
		name_color = pack_settings.get('color', '')
		format_codes['%N'] = color(name, name_color)

		encryption_flag = msg.get('encrypted', False)
		if encryption_flag == True:
			separator_color = unpack_settings.get('encrypted_color',
							'red')
		else:
			separator_color = unpack_settings.get(
				'unencrypted_color', None)
		format_codes['%S'] = separator_color

		# run the user format function
		format_codes = format_function(format_codes)

		# arrange the message according to our format string
		arranged_msg = ""
		letters = iter(range(len(line_format)))
		for c in letters:
			if line_format[c] == '%':
				next(letters)
				fc = line_format[c] + line_format[c+1]
				if fc == '%S':
					# special case
					arranged_msg += color(line_format[c+2],
						format_codes[fc])
					next(letters)
				else:
					arranged_msg += format_codes.get(fc,
						fc)
			else:
				arranged_msg += line_format[c]

		arranged_msg_list.append(arranged_msg)

	return arranged_msg_list

# transmit chain ==============================================================
def encrypt(text_to_encrypt, key=None):
	encryption = False
	if key is not None:
		cipher = AESCipher(key)
		encrypted_text = cipher.encrypt(text_to_encrypt)
		encrypted_text = encrypted_text.decode('utf-8')
		encryption = True
	else:
		encrypted_text = text_to_encrypt

	return (encrypted_text, encryption)

def pack(data_to_pack, pack_settings=None):
	text_to_pack = data_to_pack[0]

	text_to_pack = base64.b64encode(bytes(text_to_pack,
		encoding = 'utf-8'))

	if pack_settings != None:
		pack_settings = base64.b64encode(
			bytes(json.dumps(pack_settings),encoding = 'utf-8'))

		packed_data = {
			'msg': text_to_pack.decode('utf-8'),
			'settings': pack_settings.decode('utf-8'),
			'encrypted': data_to_pack[1]
			}
	else:
		packed_data = {
			'msg' : text_to_pack.decode('utf-8'),
			'encrypted' : data_to_pack[1]
			}

	return packed_data

def tx(server, room, msg):
	requests.post(server + room + '!post', json = msg)

def push(server, room, msg, key=None, pack_settings=None):
	encrypted_msg = encrypt(msg, key)
	packed_msg = pack(encrypted_msg, pack_settings)
	tx(server, room, packed_msg)

def pull(server, room, depth, ids_after, key=None, unpack_settings=None):
	# handle exceptions cause by being unable to query the server
	# these are pretty infrequent and IDK how to simulate it so
	# I'm just catching everything except ^C (not great thus: TODO)
	try:
		encrypted_msgs, last_id = rx(server, room, depth, ids_after)
		plain_msgs = decrypt(encrypted_msgs, key)
		pretty_msgs = unpack(plain_msgs, unpack_settings)
	except KeyboardInterrupt:
		raise
	except Exception:
		pretty_msgs = []
		last_id = ids_after
	return pretty_msgs, last_id

# receive/transmit frontends ==================================================
def transmitter(server, room, key=None, pack_settings=None):
	while True:
		new_msg = input(">")
		push(server, room, new_msg, key, pack_settings)

def receiver(server, room, depth, key=None, unpack_settings=None):
	last_id = 0
	while True:
		msg_list, last_id = pull(server, room, depth, last_id, key,
			unpack_settings)
		for msg in msg_list:
			print(msg)

# transceiver internals =======================================================
kq = queue.Queue() # keyboard queue
nq = queue.Queue() # network queue
pushq = queue.Queue() # push queue
halt = threading.Event()

def transceiver(
	server,
	room,
	depth,
	key=None,
	pack_settings=None,
	unpack_settings=None
	):
	# set up the terminal for cbreak mode preserve the old terminal
	# settings so that we can un-cbreak when we exit
	fd = sys.stdin.fileno()
	old = termios.tcgetattr(fd)
	tty.setcbreak(fd)

	# hide the cursor
	write_and_flush("\x1B[?25l")

	# create our threads
	kbd = threading.Thread(target=poll_keyboard)
	nbpull = threading.Thread(target=nonblocking_pull, args=(server, room,
		depth, key, unpack_settings))
	nbpush = threading.Thread(target=nonblocking_push, args=(server, room,
		key, pack_settings))

	# start them
	kbd.start()
	nbpull.start()
	nbpush.start()

	try:
		update_display(server, room, depth, key, pack_settings)
	except KeyboardInterrupt:
		# stop polling
		halt.set()
		# this is a bit of an ugly hack
		# get blocks, so to halt we need to put something on the push
		# queue so that nonblocking_push checks the halt condition
		# doing it pythonically with exception and get_nowait was too
		# slow and made pushes lag noticably...
		pushq.put(None)
		# undo cbreak mode
		old[3] = old[3] | termios.ECHO
		termios.tcsetattr(fd, termios.TCSADRAIN, old)
		# clear the screen and rehome the cursor
		clear_and_home()
		# un hide the cursor
		write_and_flush("\x1B[?25h")
		raise

def poll_keyboard():
	while True:
		char = sys.stdin.read(1)
		kq.put(char)
		if halt.is_set():
			return

def nonblocking_pull(server, room, depth, key=None, unpack_settings=None):
	last_id = 0
	while True:
		msg_list, last_id = pull(server, room, depth, last_id, key,
			unpack_settings)
		for msg in msg_list:
			nq.put(msg)
		if halt.is_set():
			return

def nonblocking_push(server, room, key=None, pack_settings=None):
	while True:
		to_push = pushq.get()
		if to_push != None:
			push(server, room, to_push, key, pack_settings)
		if halt.is_set():
			return

def update_display(server, room, depth, key=None, pack_settings=None):
	prompt = "> "
	msg_buffer = []
	inpbuf = input_buffer()

	while True:
		# get messages from the network queue
		new_msgs = False
		while not nq.empty():
			msg_buffer.append(nq.get())
			new_msgs = True

		while len(msg_buffer) > depth:
			msg_buffer.pop(0)

		# get characters from the keyboard queue
		char = None
		while not kq.empty():
			if char == None:
				char = ""
			char += kq.get()

		# clear the screen and print the message buffer
		# only if we got new messages
		if new_msgs:
			clear_and_home()
			for msg in msg_buffer:
				print(msg)
			write_and_flush(prompt+inpbuf.cursor_line())

		# print or send the message
		if char != "\n":
			# if we don't get a newline continue to
			# build the message, and print it
			if char != None:
				# append the incoming character
				inpbuf.append(char)
				# determine how wide the terminal is
				rows, columns = os.popen(
					'stty size', 'r').read().split()
				# calculate how many lines the buffer displays
				# as on the terminal
				lines_to_del = math.ceil((len(inpbuf.line())
					+ len(prompt))/int(columns))
				# delete those lines
				delete_lines(lines_to_del)
				# re-draw the buffer
				spell_line = spell_check(inpbuf.cursor_line())
				write_and_flush(prompt + spell_line)
		elif char != None:
			# send the message
			pushq.put(inpbuf.line())
			inpbuf.clear()
			write_and_flush("\n" + prompt)

# configuration ===============================================================
def config_from_defaults():
	# our default global settings
	global_settings = {
		'waksmemes.x10host.com' : {
			'url' : 'http://waksmemes.x10host.com/mess/?',
			'main' : None
			},
		'server' : 'waksmemes.x10host.com',
		'room' : 'main',
		'depth' : 24
	}
	return global_settings

def config_from_file(global_settings):
	# attempt to load a user config file
	sys.path.append(os.path.join(os.path.expanduser('~'), '.config'))
	try:
		from rtx import config
	except ImportError:
		pack_settings = None
		unpack_settings = None

	# merge the user's global settings with the defaults
	# possible exception if the user no global settings
	try:
		global_settings = merge_dicts(config.global_settings, \
			global_settings)
	except (AttributeError, UnboundLocalError) as e:
		pass
	
	# attempt to load un/pack settings from config
	try:
		pack_settings = config.pack_settings
	except (AttributeError, UnboundLocalError) as e:
		pack_settings = None;
	try:
		unpack_settings = config.unpack_settings
	except (AttributeError, UnboundLocalError) as e:
		unpack_settings = None;

	return global_settings, pack_settings, unpack_settings

def config_from_cmd(global_settings, pack_settings, unpack_settings):
	# The available command line arguments are:
	arguments = {
		'--url=' : None,
		'--room=' : None,
		'--key=' : None,
		'--depth=' : None,
		'--pack_settings=' : None,
		'--unpack_settings=' : None,
		'--mode=' : None,
		'--write_config=' : None # unimplemented
	}

	# parse fill the arguments dict
	for arg in sys.argv:
		for arg_name in arguments:
			if arg.startswith(arg_name):
				arguments[arg_name] = arg[len(arg_name):]

	cmd_global_settings = {}

	# parse the server's url if given
	if arguments['--url='] != None:
		parsed_uri = urllib.parse.urlparse(arguments['--url='])
		server = '{uri.netloc}'.format(uri=parsed_uri)
	else:
		server = None

	if arguments['--depth='] != None:
		cmd_global_settings['depth']=int(arguments['--depth='])

	# TODO: get smarter and fix this...
	# this builds a new global_settings from cmd args, failing over to
	# defaults that were passed in global_settings, in a way that makes
	# contextual sense. essentially there are three properties:
	# url, room, key,
	# there are 8 ways the above info can be passed so this block just
	# goes through all 8 building the settings dict
	# it sucks cause its completely non-general and requires knowledge
	# about significance (in a MSB sense) of the above properties
	if server != None:
		cmd_global_settings[server] = {}
		cmd_global_settings['server'] = server

		if arguments['--room='] != None:
			room = arguments['--room=']
			cmd_global_settings['room'] = room
			if arguments['--key='] != None:
				cmd_global_settings[server][room] = \
					arguments['--key=']
			else:
				cmd_global_settings[server][room] = \
				global_settings[server][room]
		else:
			room = global_settings['room']
			if arguments['--key='] != None:
				cmd_global_settings[server][room] = \
					arguments['--key=']
			else:
				cmd_global_settings[server][room] = \
				global_settings[server][room]
	else:
		server = global_settings['server']
		if arguments['--room='] != None:
			room = arguments['--room=']
			cmd_global_settings['room'] = room
			if room in global_settings[server]:
				if arguments['--key='] != None:
					global_settings[server][room] = \
						arguments['--key=']
			else:
				global_settings[server][room] = \
					arguments['--key=']
		else:
			if arguments['--key='] != None:
				room = global_settings['room']
				global_settings[server][room] = \
					arguments['--key=']

	# merge in the settings table we just built
	global_settings = merge_dicts(cmd_global_settings, global_settings)

	# un/pack settings are flat and potentially very long, so we just let
	# the user specifify a dictionary and then interperate it literally
	# this could maybe be more elegant...
	# then we merge the dicts we got (if any).
	# this just explodes in flames if the user passes malformed dicts,
	# because this function is already a mess and I'm not writing a python
	# parser
	if arguments['--pack_settings='] != None:
		cmd_pack_settings = \
			ast.literal_eval(arguments['--pack_settings='])
		pack_settings = merge_dicts(cmd_pack_settings,
			pack_settings)
	if arguments['--unpack_settings='] != None:
		cmd_unpack_settings = \
			ast.literal_eval(arguments['--unpack_settings='])
		unpack_settings = merge_dicts(cmd_unpack_settings,
			unpack_settings)

	if arguments['--mode='] == 'tx':
		mode = 'tx'
	elif arguments['--mode='] == 'rx':
		mode = 'rx'
	else:
		mode = 'rtx'

	return global_settings, pack_settings, unpack_settings, mode

def main():
	# get our configuration
	global_settings = config_from_defaults()
	
	global_settings, pack_settings, unpack_settings = \
		config_from_file(global_settings)
	
	global_settings, pack_settings, unpack_settings, mode = \
		config_from_cmd(
			global_settings,
			pack_settings,
			unpack_settings
		)

	# init our connection variables
	server_name = global_settings['server']
	room = global_settings['room']
	depth = global_settings['depth']
	server = global_settings[server_name]['url']
	key = global_settings[server_name][room]

	# start talking!
	if mode == 'rx':
		receiver(server, room, depth, key, unpack_settings)
	elif mode == 'tx':
		transmitter(server, room, key, pack_settings)
	elif mode == 'rtx':
		transceiver(server, room, depth, key,
			pack_settings, unpack_settings)

if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		print()
		sys.exit(0)
